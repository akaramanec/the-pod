// px to rem
@function rem($pixels, $context: $font__size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}

@mixin size($width,$height: $width) {
  width: $width;
  height: $height;
}

// z-index
@function z($name, $z-indexes-list: $z-indexes) {
  @if index($z-indexes-list, $name) {
    @return (length($z-indexes-list) - index($z-indexes-list, $name)) + 1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes-list}';

    @return null;
  }
}

// List
$z-indexes: (
  'modal',
  'modal-bg',
  'nav',
  'header',
  'top-content',
  'content',
  'bg-content',
  'footer'
);

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top : bottom,
    to top right : bottom left,
    to right top : left bottom,
    to right : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom : top,
    to bottom left : top right,
    to left bottom : right top,
    to left : right,
    to left top : right bottom,
    to top left : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin pseudoElement($width,$url: null,$position: absolute) {
  content: '';
  display: block;
  position: $position;
  @include size($width);
  @if ($url != null) {
    background-image: url($iconsPath + $url);
    background-size: contain;
    background-repeat: no-repeat;
    position: center;
  }
}

//MEdia queries
@mixin mediaQueriesFor($size) {
  @if $size == mobile {
    @media screen and (max-width: $phoneWidth) {
      @content;
    }
  } @else if $size == tablet-normal {
    @media screen and (max-width: $tableWidth) {
      @content;
    }
  } @else if $size == tablet-max {
    @media screen and (max-width: $smDesktopWidth) {
      @content;
    }
  } @else if $size == desktop {
    @media screen and (max-width: $desktopWidth) {
      @content;
    }
  } @else if $size == desktop-only {
    @media screen and (min-width: $desktopWidth) {
      @content;
    }
  } @else {
    @media screen and (min-width: $size) {
      @content;
    }
  }
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-display: swap;
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;

  }
}

@mixin ie11() {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

