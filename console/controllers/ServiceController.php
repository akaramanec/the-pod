<?php

namespace console\controllers;

use backend\modules\admin\models\AuthLogger;
use backend\modules\bot\models\Bot;
use backend\modules\bot\models\BotLogger;
use backend\modules\bot\telegram\TAdmin;
use backend\modules\bot\telegram\TBaseCommon;
use backend\modules\bot\viber\VAdmin;
use backend\modules\customer\models\Customer;
use backend\modules\customer\models\CustomerTag;
use backend\modules\customer\models\CustomerTagLink;
use src\helpers\Date;
use src\helpers\Demo;
use Yii;
use yii\console\Controller;

class ServiceController extends Controller
{

    public function actionDelMessage()
    {
        $pattern = '/^.–®–æ —Ç—ã, –ú–∏—Ä–æ–Ω/';
        $bot = new TBaseCommon();
        foreach (BotLogger::find()->all() as $log) {
            if (isset($log->data['ok']) == true &&
                isset($log->data['result']['text']) &&
                preg_match($pattern, $log->data['result']['text']) &&
                isset($log->data['result']['message_id']) &&
                isset($log->data['result']['chat']['id'])) {
                try {
                    $bot->deleteMessageByPlatformIdAndMessageId($log->data['result']['chat']['id'], $log->data['result']['message_id']);
                } catch (\Exception $e) {
                    continue;
                }
            }
        }
    }

    public function actionTag()
    {
        foreach (Customer::find()->each() as $customer) {
            try {

                $model = new CustomerTagLink();
                $model->customer_id = $customer->id;
                $model->tag_id = CustomerTag::TAG_NEW;
                $model->save();
            } catch (\Exception $e) {
                continue;
            }
        }
    }

    public function actionTest()
    {
        new Demo();
    }

    public function actionClearLogger()
    {
        $dayMinus = Date::minusPlus(Date::datetime_now(), '-4 day');
        AuthLogger::deleteAll(['<', 'created_at', $dayMinus]);
        BotLogger::deleteAll(['<', 'created_at', $dayMinus]);

        BotLogger::save_input('ok', __METHOD__);
    }

    public function actionSendMessage()
    {
        $text = "–ù–∞ —Å–≤—è–∑–∏ The Pod üôãüèª‚Äç‚ôÇÔ∏è

–ú—ã —É–≤–∏–¥–µ–ª–∏, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—à –±–æ—Ç –∏ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ üò¢

–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –£ –Ω–∞—Å –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ‚úÖ

–¢–∞–∫ –∂–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ –≥–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É –±—É–ª—å–≤–∞—Ä –õ–µ—Å–∏ –£–∫—Ä–∞–∏–Ω–∫–∏ 23 (–º.–ü–µ—á–µ—Ä—Å–∫–∞—è). –£ –Ω–∞—Å –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ –≤–∫—É—Å—ã –∏ –≤—ã–±—Ä–∞—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è üí™üèª

–°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É -10% –Ω–∞–≤—Å–µ–≥–¥–∞ üòå‚ù§Ô∏è";
        $botCustomers = Customer::find()->where(['between', 'created_at', "2021-09-16 10:30:00", "2021-09-16 13:00:00"])->all();

        $countCustomers = count($botCustomers);

        foreach ($botCustomers as $customer) {
            print_r(($countCustomers--)."...");
            try {
                if ($customer->bot->platform == Bot::TELEGRAM) {
                    Yii::$app->tm->customer = $customer;
                    Yii::$app->tm->platformId = $customer->platform_id;
                    $TAdmin = new TAdmin();

                    $TAdmin->keyboard($text, $TAdmin->keyboardMainMenu());

                }
                if ($customer->bot->platform == Bot::VIBER) {
                    Yii::$app->vb->customer = $customer;
                    Yii::$app->vb->platformId = $customer->platform_id;
                    $VAdmin = new VAdmin();

                    $VAdmin->keyboard($text, $VAdmin->mainMenuKeyboard());

                }
            } catch (\Exception $e) {
                print_r("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id: $customer->id –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        }

    }
}
